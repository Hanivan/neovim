local luasnip = require("luasnip")
local cmp = require("cmp")
local lspkind = require("lspkind")

local feedkeys = vim.fn.feedkeys
local replace_termcodes = vim.api.nvim_replace_termcodes
local backspace_keys = replace_termcodes("<tab>", true, true, true)
local snippet_next_keys = replace_termcodes("<plug>luasnip-expand-or-jump", true, true, true)
local snippet_prev_keys = replace_termcodes("<plug>luasnip-jump-prev", true, true, true)

local function check_backspace()
	local col = vim.fn.col(".") - 1
	return col == 0 or vim.fn.getline("."):sub(col, col):match("%s") ~= nil
end

cmp.setup({

	completion = {
		autocomplete = { cmp.TriggerEvent.TextChanged },
	},

	documentation = {
		border = "single",
		winhighlight = "NormalFloat:CmpDocumentation,FloatBorder:CmpDocumentationBorder",
	},

	snippet = {
		expand = function(args)
			luasnip.lsp_expand(args.body)
		end,
	},

	sources = {
		{ name = "nvim_lsp" },
		{ name = "luasnip" },
	},

	mapping = {
		["<C-Space>"] = cmp.mapping.complete(),
		["<C-e>"] = cmp.mapping.close(),
		["<CR>"] = cmp.mapping.confirm({ select = true }),
		["<Tab>"] = cmp.mapping(function(fallback)
			if cmp.visible() then
				cmp.select_next_item()
			elseif luasnip.expand_or_jumpable() then
				feedkeys(snippet_next_keys, "")
			elseif check_backspace() then
				feedkeys(backspace_keys, "n")
			else
				fallback()
			end
		end, {
			"i",
			"s",
		}),
		["<S-Tab>"] = cmp.mapping(function(fallback)
			if cmp.visible() then
				cmp.select_prev_item()
			elseif luasnip.jumpable(-1) then
				feedkeys(snippet_prev_keys, "")
			else
				fallback()
			end
		end, {
			"i",
			"s",
		}),
	},

	formatting = {
		format = lspkind.cmp_format({
			with_text = true,
			maxwidth = 50, -- prevent the popup from showing more than provided characters (e.g 50 will not show more than 50 characters)

			-- The function below will be called before any actual modifications from lspkind
			-- so that you can provide more controls on popup customization. (See [#30](https://github.com/onsails/lspkind-nvim/pull/30))
			before = function(entry, vim_item)
				return vim_item
			end,
		}),
	},
})
